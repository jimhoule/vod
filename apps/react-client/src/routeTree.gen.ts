/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as ProtectedProfilesRouteImport } from './routes/_protected/movies/route'
import { Route as ProtectedProfilesIndexImport } from './routes/_protected/profiles/index'
import { Route as ProtectedMoviesIndexImport } from './routes/_protected/movies/index'
import { Route as ProtectedProfilesIdImport } from './routes/_protected/profiles/$id'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const ProtectedProfilesRouteRoute = ProtectedProfilesRouteImport.update({
  id: '/profiles',
  path: '/profiles',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedProfilesIndexRoute = ProtectedProfilesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedProfilesRouteRoute,
} as any)

const ProtectedMoviesIndexRoute = ProtectedMoviesIndexImport.update({
  id: '/movies/',
  path: '/movies/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedProfilesIdRoute = ProtectedProfilesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProtectedProfilesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/profiles': {
      id: '/_protected/profiles'
      path: '/profiles'
      fullPath: '/profiles'
      preLoaderRoute: typeof ProtectedProfilesRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_protected/profiles/$id': {
      id: '/_protected/profiles/$id'
      path: '/$id'
      fullPath: '/profiles/$id'
      preLoaderRoute: typeof ProtectedProfilesIdImport
      parentRoute: typeof ProtectedProfilesRouteImport
    }
    '/_protected/movies/': {
      id: '/_protected/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof ProtectedMoviesIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/profiles/': {
      id: '/_protected/profiles/'
      path: '/'
      fullPath: '/profiles/'
      preLoaderRoute: typeof ProtectedProfilesIndexImport
      parentRoute: typeof ProtectedProfilesRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProtectedProfilesRouteRouteChildren {
  ProtectedProfilesIdRoute: typeof ProtectedProfilesIdRoute
  ProtectedProfilesIndexRoute: typeof ProtectedProfilesIndexRoute
}

const ProtectedProfilesRouteRouteChildren: ProtectedProfilesRouteRouteChildren =
  {
    ProtectedProfilesIdRoute: ProtectedProfilesIdRoute,
    ProtectedProfilesIndexRoute: ProtectedProfilesIndexRoute,
  }

const ProtectedProfilesRouteRouteWithChildren =
  ProtectedProfilesRouteRoute._addFileChildren(
    ProtectedProfilesRouteRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtectedProfilesRouteRoute: typeof ProtectedProfilesRouteRouteWithChildren
  ProtectedMoviesIndexRoute: typeof ProtectedMoviesIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedProfilesRouteRoute: ProtectedProfilesRouteRouteWithChildren,
  ProtectedMoviesIndexRoute: ProtectedMoviesIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/profiles': typeof ProtectedProfilesRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/profiles/$id': typeof ProtectedProfilesIdRoute
  '/movies': typeof ProtectedMoviesIndexRoute
  '/profiles/': typeof ProtectedProfilesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/profiles/$id': typeof ProtectedProfilesIdRoute
  '/movies': typeof ProtectedMoviesIndexRoute
  '/profiles': typeof ProtectedProfilesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/profiles': typeof ProtectedProfilesRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_protected/profiles/$id': typeof ProtectedProfilesIdRoute
  '/_protected/movies/': typeof ProtectedMoviesIndexRoute
  '/_protected/profiles/': typeof ProtectedProfilesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/profiles'
    | '/login'
    | '/profiles/$id'
    | '/movies'
    | '/profiles/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/profiles/$id' | '/movies' | '/profiles'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/_protected/profiles'
    | '/_auth/login'
    | '/_protected/profiles/$id'
    | '/_protected/movies/'
    | '/_protected/profiles/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/profiles",
        "/_protected/movies/"
      ]
    },
    "/_protected/profiles": {
      "filePath": "_protected/profiles/route.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/profiles/$id",
        "/_protected/profiles/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_protected/profiles/$id": {
      "filePath": "_protected/profiles/$id.tsx",
      "parent": "/_protected/profiles"
    },
    "/_protected/movies/": {
      "filePath": "_protected/movies/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/profiles/": {
      "filePath": "_protected/profiles/index.tsx",
      "parent": "/_protected/profiles"
    }
  }
}
ROUTE_MANIFEST_END */
