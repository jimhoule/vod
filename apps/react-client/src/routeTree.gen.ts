/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProfilesIndexImport } from './routes/profiles/index'
import { Route as MoviesIndexImport } from './routes/movies/index'
import { Route as ProfilesIdImport } from './routes/profiles/$id'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfilesIndexRoute = ProfilesIndexImport.update({
  id: '/profiles/',
  path: '/profiles/',
  getParentRoute: () => rootRoute,
} as any)

const MoviesIndexRoute = MoviesIndexImport.update({
  id: '/movies/',
  path: '/movies/',
  getParentRoute: () => rootRoute,
} as any)

const ProfilesIdRoute = ProfilesIdImport.update({
  id: '/profiles/$id',
  path: '/profiles/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/profiles/$id': {
      id: '/profiles/$id'
      path: '/profiles/$id'
      fullPath: '/profiles/$id'
      preLoaderRoute: typeof ProfilesIdImport
      parentRoute: typeof rootRoute
    }
    '/movies/': {
      id: '/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesIndexImport
      parentRoute: typeof rootRoute
    }
    '/profiles/': {
      id: '/profiles/'
      path: '/profiles'
      fullPath: '/profiles'
      preLoaderRoute: typeof ProfilesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/profiles/$id': typeof ProfilesIdRoute
  '/movies': typeof MoviesIndexRoute
  '/profiles': typeof ProfilesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/profiles/$id': typeof ProfilesIdRoute
  '/movies': typeof MoviesIndexRoute
  '/profiles': typeof ProfilesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/profiles/$id': typeof ProfilesIdRoute
  '/movies/': typeof MoviesIndexRoute
  '/profiles/': typeof ProfilesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/profiles/$id' | '/movies' | '/profiles'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/profiles/$id' | '/movies' | '/profiles'
  id: '__root__' | '/' | '/about' | '/profiles/$id' | '/movies/' | '/profiles/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ProfilesIdRoute: typeof ProfilesIdRoute
  MoviesIndexRoute: typeof MoviesIndexRoute
  ProfilesIndexRoute: typeof ProfilesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  ProfilesIdRoute: ProfilesIdRoute,
  MoviesIndexRoute: MoviesIndexRoute,
  ProfilesIndexRoute: ProfilesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/profiles/$id",
        "/movies/",
        "/profiles/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/profiles/$id": {
      "filePath": "profiles/$id.tsx"
    },
    "/movies/": {
      "filePath": "movies/index.tsx"
    },
    "/profiles/": {
      "filePath": "profiles/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
